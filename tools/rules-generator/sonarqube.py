from common import RulesWriter
from lxml import etree 

class SonarQubeRulesXmlWriter(RulesWriter):
    def write_rules(self, rules, filePath):
        root = etree.Element('rules')
        for rule in rules:
            rule_elem = etree.SubElement(root,'rule')
            key_elem = etree.SubElement(rule_elem, 'key')
            key_elem.text = rule.id
            name_elem = etree.SubElement(rule_elem, 'name')
            name_elem.text = rule.name
            desc_elem = etree.SubElement(rule_elem, 'description')
            desc_elem.text = etree.CDATA("{0} <br/> <a href='{1}' target='_blank'> {1}</a>".format(rule.desc, rule.link))
            type_elem = etree.SubElement(rule_elem, 'type')
            type_elem.text = 'VULNERABILITY'
            help_elem = etree.SubElement(rule_elem, 'help')
            help_elem.text = etree.CDATA("<a href='{0}' target='_blank'> Rule Docs</a> <br/> <a href='{1}' target='_blank'>{1}</a>".format(rule.link, rule.help_link))

        tree = etree.ElementTree(root)
        with open (filePath, "wb") as file :
            tree.write(file)

    def write_rule_ids(self, rule_ids, file_path):
        rule_ids_arr = '\",\"'.join(rule_ids)
        code = "// Auto-generated by tools/rules-generator scripts\n" \
        "package org.sonarsource.plugins.extanalyzer.rules;\n" \
        "import java.util.Set;\n" \
        "public final class Rules {\n" \
        "    public static final Set<String> RULE_IDS = Set.of(\""+rule_ids_arr+"\");\n" \
        "}"
        
        with open (file_path, "w+") as file :
            file.write(code)

class SonarQubeRulesXmlReader:
    def get_rule_ids(self, file_path):
        tree = etree.parse(file_path)
        rules = tree.getroot()
        rule_ids = [rule_id_elem.text for rule_id_elem in rules.iter('key')]
        return rule_ids